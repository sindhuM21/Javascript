In strict mode this of function expression, function declartion are undefined and this of arrow function is  {}
in sloopy mode this of function expresion, function declaration are gobla object and this of arro function is {}

--------------------------------example of this------------------------------------------------------------

"use strict";
const expresAdd = function(a, b){
    console.log("this of function expression", this);
    return a + b;
}

expresAdd(5, 8);

const arrowAdd = (a, b) => {
    console.log("this of arrow function", this);
    return a + b;
}

arrowAdd(3, 8);

function add(a, b){
    console.log("this of function declaration", this);
    return a + b;
}

add(6, 4);

------------------------------------------example of this ends ----------------------------------------------

Sets:

Set.prototype[@@iterator]()
Returns a new Iterator object that yields the values for each element in the Set object in insertion order.

Set.prototype.keys()
Returns a new Iterator object that yields the values for each element in the Set object in insertion order. 
(For Sets, this is the same as the values() method.)

Set.prototype.values()
Returns a new Iterator object that yields the values for each element in the Set object in insertion order. 
(For Sets, this is the same as the keys() method.)

Set.prototype.entries()
Returns a new Iterator object that contains an array of [value, value] for each element in the Set object, 
in insertion order.

This is similar to the Map object, so that each entry's key is the same as its value for a Set.

Set.prototype.forEach(callbackFn[, thisArg])
Calls callbackFn once for each value present in the Set object, in insertion order. 
If a thisArg parameter is provided, it will be used as the this value for each invocation of callbackFn.